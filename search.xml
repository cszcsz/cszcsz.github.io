<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法笔记-07二叉搜索树</title>
    <url>/2019/11/21/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-07%E4%BA%8C%E5%8F%89%E6%A0%91&amp;%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><ul>
<li><p>基于指针或者引用的二叉<strong>链式存储</strong>法</p>
</li>
<li><p>基于数组的<strong>顺序存储</strong>法</p>
<p>（此法比较适合存储完全二叉树，根节点从下标1开始存，左、右子节点分别在2i和2i+1的位置）</p>
</li>
</ul>
<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>又叫二叉查找树或二叉排序树，其定义为在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。</p>
<p>重要特性：按<strong>中序遍历</strong>二叉查找树，可以输出有序的数据序列，时间复杂度是O(n)，非常高效。 </p>
<p>支持<strong>重复数据</strong>的二叉查找树：</p>
<ul>
<li>二叉查找树中每一个节点不仅只存储一个数据，我们使用链表和支持动态扩容的数组等数据结构，<strong>把值相同的数据都存储在同一个节点上</strong> </li>
<li>每个节点仍只存储一个数据，但插入相同数据的时候<strong>当作大于这个节点</strong>来处理</li>
</ul>
<p>二叉查找树不管是插入、删除还是查找，时间复杂度都与树的<strong>高度</strong>成正比即O(height)。 平衡二叉查找树的高度接近 logn，所以插入、删除、查找操作的时间复杂度也比较稳定，是 O(logn) 。</p>
<h3 id="平衡的二叉搜索树-VS-散列表"><a href="#平衡的二叉搜索树-VS-散列表" class="headerlink" title="平衡的二叉搜索树 VS 散列表"></a>平衡的二叉搜索树 VS 散列表</h3><p>二叉查找树在比较平衡的情况下，插入、删除、查找操作时间复杂度才是 O(logn)，相对散列表，好像并没有什么优势，那我们为什么还要用二叉查找树呢？ </p>
<ol>
<li>散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，我们只需要中序遍历，就可以在 O(n) 的时间复杂度内，输出有序的数据序列 </li>
<li>散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定。我们最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在 O(logn)。 </li>
<li>尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。</li>
<li>散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。 </li>
</ol>
<p><strong>综上所述，平衡二叉搜索树在某些方面还要优于散列表，这两者并不冲突，我们需要结合实际的情况和需求来选择</strong></p>
<a id="more"></a>

<h3 id="二叉搜索树的C-实现"><a href="#二叉搜索树的C-实现" class="headerlink" title="二叉搜索树的C++实现"></a>二叉搜索树的C++实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *lch, *rch;</span><br><span class="line">    Node(<span class="keyword">int</span> x) : data(x), lch(<span class="literal">nullptr</span>), rch(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node *root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinarySearchTree() = <span class="keyword">default</span>;</span><br><span class="line">    ~BinarySearchTree() &#123; DestoryTree(root); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x, Node *&amp;r)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, Node *r)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetHeight</span><span class="params">(Node *r)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Node *r)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Node *r)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Node *r)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DestoryTree</span><span class="params">(Node *r)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BinarySearchTree::DestoryTree(Node *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    DestoryTree(r-&gt;lch);</span><br><span class="line">    DestoryTree(r-&gt;rch);</span><br><span class="line">    <span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BinarySearchTree::InOrder(Node *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    InOrder(r-&gt;lch);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; r-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    InOrder(r-&gt;rch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> BinarySearchTree::PreOrder(Node *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; r-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    PreOrder(r-&gt;lch);</span><br><span class="line">    PreOrder(r-&gt;rch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BinarySearchTree::PostOrder(Node *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PostOrder(r-&gt;lch);</span><br><span class="line">    PostOrder(r-&gt;rch);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; r-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BinarySearchTree::LevelOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node *&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node *top = q.front();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; top-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span> (top-&gt;lch != <span class="literal">nullptr</span>)</span><br><span class="line">            q.push(top-&gt;lch);</span><br><span class="line">        <span class="keyword">if</span> (top-&gt;rch != <span class="literal">nullptr</span>)</span><br><span class="line">            q.push(top-&gt;rch);</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BinarySearchTree::GetHeight(Node *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> max(GetHeight(r-&gt;lch), GetHeight(r-&gt;rch)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BinarySearchTree::Insert(<span class="keyword">int</span> x, Node *&amp;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        r = <span class="keyword">new</span> Node(x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; r-&gt;data)</span><br><span class="line">        Insert(x, r-&gt;lch);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Insert(x, r-&gt;rch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> BinarySearchTree::Find(<span class="keyword">int</span> x, Node *r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (r-&gt;data == x)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (r-&gt;data &lt; x)</span><br><span class="line">        Find(x, r-&gt;rch);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Find(x, r-&gt;lch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> BinarySearchTree::Delete(<span class="keyword">int</span> x)      <span class="comment">// 删除操作是二叉搜索树的重点和难点！！！</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *p = root, *pp = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">//先找到待删除的节点并记录其父节点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;data != x)</span><br><span class="line">    &#123;</span><br><span class="line">        pp = p;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &gt; x)</span><br><span class="line">            p = p-&gt;lch;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;rch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//情况1：待删除节点有两个子节点</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;lch != <span class="literal">nullptr</span> &amp;&amp; p-&gt;rch != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Node *tmpMinp = p-&gt;rch, *tmpMinpp = p;</span><br><span class="line">        <span class="keyword">while</span> (tmpMinp-&gt;lch != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmpMinpp = tmpMinp;</span><br><span class="line">            tmpMinp = tmpMinp-&gt;lch;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data = tmpMinp-&gt;data; <span class="comment">// 令待删除节点的值为其右子树上的最小值</span></span><br><span class="line">        p = tmpMinp;             <span class="comment">// 再删除该右子树最小值节点，巧妙的转化为情况2</span></span><br><span class="line">        pp = tmpMinpp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//情况2：待删除节点是叶子节点或只有一个子节点</span></span><br><span class="line">    Node *child;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;lch != <span class="literal">nullptr</span>)</span><br><span class="line">        child = p-&gt;lch;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;rch != <span class="literal">nullptr</span>)</span><br><span class="line">        child = p-&gt;rch;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        child = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (pp == <span class="literal">nullptr</span>) <span class="comment">//如果删除的是根节点</span></span><br><span class="line">        root = child;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pp-&gt;lch == p)</span><br><span class="line">            pp-&gt;lch = child;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp-&gt;rch == p)</span><br><span class="line">            pp-&gt;rch = child;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记-06哈希算法</title>
    <url>/2019/11/20/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-06%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>哈希算法定义：将任意长度的二进制值串映射为固定长度的二进制值串。</p>
<p>哈希算法所要满足的几点要求：</p>
<ul>
<li>单向性（从哈希值不能反推出原始数据）</li>
<li>敏感性（对输入数据非常敏感，哪怕只修改了1个bit，最后得到的哈希值也大不相同）</li>
<li>平衡性（散列冲突的概率要很小，对于不同的原始数据，哈希值相同的概率很小）</li>
<li>高效性（哈希算法的执行效率要尽可能高，针对较长的文本也能够快速地计算出哈希值）</li>
</ul>
<p>但是哈希算法无法做到零冲突！其背后原因其实是<strong>鸽巢原理</strong>：比如说MD5算法产生的哈希值是128位的二进制串，最多能表示2<sup>128</sup>的个数据。而我们要哈希的数据可是无穷的，如果我们对2<sup>128</sup>+1个数据求哈希值则必然会有两个数据的哈希值是相同的。</p>
<br>

<h3 id="哈希算法的应用"><a href="#哈希算法的应用" class="headerlink" title="哈希算法的应用"></a>哈希算法的应用</h3><h4 id="安全加密"><a href="#安全加密" class="headerlink" title="安全加密"></a>安全加密</h4><p>最常用于加密的哈希算法是<strong>MD5</strong>（MD5 Message-Digest Algorithm,MD5 消息摘要算法）和<strong>SHA</strong>（Secure Hash Algorithm，安全散列算法） </p>
<p>最简单的应用就是把用户的密码经过哈希以密文的形式存储在数据库中。由于哈希算法的不可逆性，黑客就算盗取了数据库的密码密文，也无法反推出原始密码。若想破解哈希算法如MD5，它有2<sup>128</sup>个不同的哈希值，这样想通过穷举的方法找到跟这个MD5值相同的另一个数据所耗费的时间是一个天文数字。所以，即便存在哈希冲突，但在有限时间和资源的情况下，哈希算法还是很难破解的。</p>
<p>另外，为了防止黑客通过彩虹表匹配（彩虹表中存放着某一哈希算法下常用密码对应的哈希值）获取用户真实密码。我们可以通过<strong>+salt（加盐）</strong>的做法来保证用户密码的安全，若用户设定的密码是“123456”，加盐之后是”12x3y456z”，这样再经过哈希得到是完全不一样的hash值。此外还可以采用随机加盐的做法，这样黑客拿到密文之后破解的难度就更高。</p>
<br>

<h4 id="唯一标识"><a href="#唯一标识" class="headerlink" title="唯一标识"></a>唯一标识</h4><p>哈希值又可以作为<strong>“数字签名”</strong>，来唯一标识对象。</p>
<p>举个栗子，我们想要在海量的图库中搜索图片是否存在，可以为每个图片取一个唯一标识（信息摘要），比如可以从一张图片的二进制码串的开头、中间、结尾各取100个字节合在一块再经过哈希算法得到一个hash值，用这个值作为图片的唯一标识。以后就可以通过标识来查找图片是否在图库中了。</p>
<br>

<h4 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h4><p>BT 下载的原理是基于 P2P 协议的。我们从多个机器上并行下载一个 2GB 的电影，这个电影文件可能会被分割成很多文件块（比如可以分成 100 块，每块大约 20MB）。等所有的文件块都下载完成之后，再组装成一个完整的电影文件就行了。</p>
<p>但是下载的文件块可能不完整或出现了bit错误，这时我们就要进行文件块的校验。我们可以先对100个文件块取哈希值并保存到种子文件中，再对下载好的文件块求哈希值并逐一和种子文件保存的哈希值对比。由于哈希算法的敏感性，就算出现一个bit错误产生的哈希值也大不相同。如果比较发现不同，则需要从其它服务器重新下载错误的文件块。</p>
<br>

<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p>相对哈希算法的其他应用，散列函数对于散列算法冲突的要求要低很多。即便出现个别散列冲突，只要不是过于严重，我们都可以通过开放寻址法或者链表法解决。 </p>
<p>散列函数对于散列算法计算得到的值，并不关心它是否能被反向解密。散列函数中用到的散列算法，更加关注散列后的值是否能<strong>平均分布</strong>。</p>
<p>另外，为了保证散列表的性能，散列函数用的散列算法一般<strong>比较简单</strong>，不会进行复杂的计算。</p>
<br>

<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>如何才能实现一个会话粘滞（session sticky）的负载均衡算法呢 ?(即同一个客户端的一个会话中的所有请求都路由到同一个服务器上)。简单的做法是维护一张映射关系表，表中存着客户端ip地址与服务器id的映射关系，客户端的每次请求都要查表找到相应的服务器。但这种做法<strong>映射表会很大，浪费内存空间，维护起来成本很大</strong>。</p>
<p>我们可以通过哈希算法，对客户端 IP 地址或者会话 ID 计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。 这样，我们就可以把同一个 IP 过来的所有请求，都路由到同一个后端服务器上。 </p>
<br>

<h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4><p>如何在1TB的日志文件中统计用户搜索关键词出现的次数呢？这么大的日志信息没办法放到一个机器的内存中，如果用一台机器来处理这么大的数据，处理时间也会非常长。</p>
<p>我们可以<strong>对数据进行分片，然后采用分布式处理的办法</strong>（多机处理）来提高处理速度。</p>
<p>我们遍历日志文件，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，<strong>用这个哈希值跟n取模得到应该被分配到的机器编号</strong>。这样，哈希值相同的关键词被分配到了同一台机器上，每台机器会分别统计关键词出现的次数，最后合并起来就是最终的结果。这里的处理过程也是MapReduce的基本设计思想。</p>
<p><strong>实际上，针对这种海量数据的处理问题，我们都可以采用多机分布式处理。借助这种分片的思路，可以突破单机内存、CPU 等资源的限制。</strong> </p>
<br>

<h4 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h4><p>我们为了提高数据的读取、写入能力，一般都采用分布式的方式来存储数据，比如分布式缓存。</p>
<p>我们有海量的数据需要缓存，所以一个缓存机器肯定是不够的。于是，我们就需要将数据分布在多台机器上。该如何决定将哪个数据放到哪个机器上呢？我们可以借用前面数据分片的思想，即<strong>通过哈希算法对数据取哈希值，然后对机器个数取模，这个最终值就是应该存储的缓存机器编号</strong>。 </p>
<p>但是，如果数据增多，原来的 10 个机器已经无法承受了，我们就需要扩容了，比如扩到 11 个机器，这时候麻烦就来了。因为，这里并不是简单地加个机器就可以了。 所有数据都要重新计算哈希值并搬移到正确的机器上去。</p>
<p>所以，我们需要一种方法，使得在新加入一个机器后，并不需要做大量的数据搬移。这时候，<strong>一致性哈希算法</strong>就要登场了 。</p>
<p>一致性哈希算法：</p>
<img src="https://raw.githubusercontent.com/cszcsz/BlogCloudImg/master/surfaceimg/constant_hash.png" width="50%" height="50%/">

<p>假设哈希环上有100个节点，首先将分布式服务器映射到哈希环上(如对机器的ip地址进行哈希)。每当有数据经过哈希映射到环上的时候<strong>顺时针</strong>找到的第一个机器就是该数据被缓存的地方。这样，当有新机器加入或者有机器被删除时，<strong>只要搬移相邻顺序上的一个机器中的数据</strong>就可以了，其它地方完全不变。此外，<strong>为了保证平衡性</strong>（即缓存的数据平均的分散到各个机器上），可以在环上的为实际机器增加<strong>虚拟节点</strong>，每当有数据落到虚拟节点上就把它归属到相应的实际机器进行存储。</p>
]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>哈希算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记-05散列表</title>
    <url>/2019/11/19/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-05%E6%95%A3%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p><strong>散列表</strong>(Hash Table)又叫哈希表，它通过散列函数将键值映射到表中的一个位置(数组下标)来访问对象。它的底层运用了数组支持下标随机访问的特性，基本上可以在O(1)的时间复杂度下完成查找、插入和删除操作。</p>
</li>
<li><p><strong>散列函数</strong>(Hash Function)又叫哈希函数，是一种从任何一种数据中创建小的”数字指纹”的方法，完成键值到散列值的映射，散列函数计算得到的散列值是一个非负整数。</p>
</li>
<li><p><strong>散列冲突</strong>，当存在key1≠key2而Hash(key1)=Hash(key2)的时候，称发生了散列冲突。</p>
</li>
<li><p><strong>装载因子</strong>，衡量散列表元素填充程度的指标，定义为（填入表中的元素个数 / 散列表长度），如果有n个元素放到了大小为m的散列表中，那么装载因子就为n/m。所以基于开放地址法来解决散列冲突的散列表装载因子不会大于1，而基于拉链法则可以大于1。<strong>装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降</strong></p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/cszcsz/BlogCloudImg/master/surfaceimg/hashtable.png" width="600px" height="400px"> </p>
<h3 id="什么是好的散列函数"><a href="#什么是好的散列函数" class="headerlink" title="什么是好的散列函数"></a>什么是好的散列函数</h3><ul>
<li>将键值映射得到的<strong>散列值尽可能随机且分布均匀</strong>。最完美的情况是不同的key对应的散列值都不一样，但几乎不可能</li>
<li><strong>计算复杂度小</strong>。过于复杂的计算会降低散列表的性能。</li>
</ul>
<br>

<h3 id="如何设计散列函数"><a href="#如何设计散列函数" class="headerlink" title="如何设计散列函数"></a>如何设计散列函数</h3><p>常见的散列函数设计方法有：直接寻址法、除留余数法、数据分析法、平方取中法、折叠法、随机数法等。</p>
<p>举三个栗子：</p>
<ul>
<li><p>直接寻址法：f(key)=key或f(key)=a*key+b。取键值或键值的某个线性函数值作为散列值。</p>
</li>
<li><p>除留余数法：f(key)=key mod p(p&lt;=m)。例如对于英文单词”world”可以先逐位对字母的ASCII码进行求和，再将求和结果mod散列表的长度作为散列值。</p>
</li>
<li><p>数据分析法：对应手机号码这个key，分析可知手机号码后面几位的值比较随机，因此可以取手机号后四位作为散列值。</p>
</li>
</ul>
<br>

<h3 id="如何解决散列冲突"><a href="#如何解决散列冲突" class="headerlink" title="如何解决散列冲突"></a>如何解决散列冲突</h3><ol>
<li><p><strong>开放寻址法</strong></p>
<p><strong>核心思想</strong>：如果出现了散列冲突，我们就重新探测一个空闲位置将其插入。开放地址法其中又包括线性探测、二次探测和双重散列。</p>
<ul>
<li><p>线性探测法</p>
<p>插入：如果映射到的槽位已经存在元素(即发生了冲突)，我们就从这开始依次遍历下一个槽位直到找到一个空槽位进行插入。</p>
<p>查找：从映射到的槽位开始逐一比较待查找元素的key值和槽内元素的key，如果相同则找到；若遍历到了一个空槽位则没有找到即不存在该元素。</p>
<p>删除：不能直接把查找到的元素所在槽“清空”，否则会导致查找算法失效。每次删除一个元素，需要在该槽位添加一个”delete”标记，表示这是执行过删除操作的空槽位，当查找算法遍历到已标记的槽位不会退出，而是跳过该槽继续往下查找。</p>
</li>
<li><p>二次探测</p>
<p>顾名思义，不像线性探测法那样逐一遍历，而是以0<sup>2</sup>,1<sup>2</sup>,2<sup>2</sup>…这样的步长进行探测。</p>
</li>
<li><p>双重散列</p>
<p>意思是不用一个散列函数，而是使用一组散列函数hash1(key),hash2(key),hash3(key)…我们先用第一个散列函数，如果位置已被占用，再用第二个散列函数，依次类推。</p>
</li>
</ul>
<p><strong>优点</strong>：数据都存在数组中，可以有效利用CPU缓存加快查找速度；序列化比较简单。</p>
<p><strong>缺点</strong>：删除操作比较麻烦；装载因子的上限不能太大，比拉链法更浪费存储空间。</p>
<p><strong>适用场景</strong>：当数据量小、装载因子小的时候。</p>
<a id="more"></a>
</li>
<li><p><strong>拉链法</strong></p>
<p><strong>核心思想</strong>：散列表中的每个”槽“都对应一个链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p>
<p><strong>优点</strong>：当装载因子变大，即使变成10，只要散列值均匀，也就是链表长度变长而已，虽然效率下降，但比顺序查找还是快得多；存储大对象时，指针所占内存可忽略不计；更加灵活，支持更多的优化策略，比如用红黑树代替链表(可以避免散列表时间复杂度退化到O(n)，JAVA中的HashMap就是这样优化的)。</p>
<p><strong>缺点</strong>：链表中的结点是零散分布在内存中的，对CPU缓存不是很友好；存储小对象时，指针的额外空间开销不可忽略。</p>
<p><strong>适用场景</strong>：存储大对象、大数据量的散列表；需要支持更多优化策略的时候。</p>
<img src="https://raw.githubusercontent.com/cszcsz/BlogCloudImg/master/surfaceimg/hashmap2.png" width="650px" height="400px/">

</li>
</ol>
<br>

<h3 id="装载因子过大怎么办"><a href="#装载因子过大怎么办" class="headerlink" title="装载因子过大怎么办"></a>装载因子过大怎么办</h3><p>采用<strong>动态扩容</strong>的机制。针对数组的扩容，数据搬移比较简单。但针对散列表的扩容却要复杂一些，因为散列表的大小变了，数据的存储位置也变了，这时<strong>需要通过散列函数重新计算每个数据的存储位置</strong>。</p>
<p>要<strong>避免</strong>低效的<strong>一次性扩容</strong>，我们可以<strong>将扩容操作穿插在插入操作</strong>的过程中：</p>
<p>当装载因子触达阈值之后，我们只申请新空间，但并不将老的数据搬移到新散列表中。 当有新数据要插入时，我们将新数据插入新散列表中，并且从老的散列表中拿出一个数据放入到新散列表。对于查询操作，为了兼容了新、老散列表中的数据，我们先从新散列表中查找，如果没有找到，再去老的散列表中查找。 通过这样均摊的方法，将一次性扩容的代价，均摊到多次插入操作中，就避免了一次性扩容耗时过多的情况。这种实现方式，任何情况下，插入一个数据的时间复杂度都是 O(1)。 </p>
<br>

<h3 id="散列表和链表、跳表的结合"><a href="#散列表和链表、跳表的结合" class="headerlink" title="散列表和链表、跳表的结合"></a>散列表和链表、跳表的结合</h3><p>散列表这种数据结构虽然支持非常高效的数据插入、删除、查找操作，但是散列表中的数据都是通过散列函数打乱之后无规律存储的。也就说，它无法支持按照某种顺序快速地遍历数据。</p>
<p>如果希望按照顺序遍历散列表中的数据，那我们需要将散列表中的数据拷贝到数组中，然后排序，再遍历。因为散列表是动态数据结构，不停地有数据的插入、删除，所以每当我们希望按顺序遍历散列表中的数据的时候，都需要先排序，那效率势必会很低。为了解决这个问题，我们可以将散列表和链表（或者跳表）结合在一起使用。</p>
]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>散列表</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记-04查找</title>
    <url>/2019/11/17/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-04%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二分查找是非常高效的算法，时间复杂度为O(logn)。但存在一定的<strong>局限性</strong>：</p>
<ol>
<li>二分查找依赖<strong>顺序表</strong>结构，比如数组</li>
<li>二分查找适用于已经<strong>有序</strong>的数据</li>
<li>二分查找适用于插入和删除操作不频繁，一次排序多次查找的场景中，不适合动态变化的数据集合</li>
<li>数据量太小或数据量太大(如：1GB，这时就需要1GB的连续内存空间，比较难分配)都不适合</li>
</ol>
<br>

<h3 id="二分查找的变形问题"><a href="#二分查找的变形问题" class="headerlink" title="二分查找的变形问题"></a>二分查找的变形问题</h3><ul>
<li>查找第一个值等于给定值的元素</li>
<li>查找最后一个值等于给定值的元素</li>
<li>查找第一个大于等于给定值的元素</li>
<li>查找最后一个小于等于给定值的元素</li>
</ul>
<p>注意：变形问题代码很容易写错，一定要理解后亲手撸一遍代码～</p>
<br>

<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.基本形态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找：在互不相同的一组有序数中查找给定值元素(最基本的形态)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> val,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo&gt;hi)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi-lo)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(val==nums[mid])</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&lt;nums[mid])</span><br><span class="line">        hi = mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;nums[mid])</span><br><span class="line">        lo = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> BinarySearch(nums,val,lo,hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>2.查找第一个值等于给定值的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找变体1：在一组有序数中,查找第一个等于给定值的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFirstEquVal</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> val,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo&gt;hi)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi-lo)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(val&lt;nums[mid])</span><br><span class="line">        hi = mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;nums[mid])</span><br><span class="line">        lo = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mid==lo||nums[mid<span class="number">-1</span>]!=val)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hi = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FindFirstEquVal(nums,val,lo,hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<p>3.查找最后一个值等于给定值的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找变体2：在一组有序数中,查找最后一个等于给定值的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindLastEquVal</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> val,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo&gt;hi)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi-lo)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(val&lt;nums[mid])</span><br><span class="line">        hi = mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;nums[mid])</span><br><span class="line">        lo = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mid==hi||nums[mid+<span class="number">1</span>]!=val)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lo = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FindFirstEquVal(nums,val,lo,hi); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>4.查找第一个大于等于给定值的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找变体3：在一组有序数中,查找第一个大于等于给定值的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFirstGreatThanVal</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> val,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo&gt;hi)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi-lo)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(val&gt;nums[mid])</span><br><span class="line">        lo = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mid==lo||nums[mid<span class="number">-1</span>]&lt;val)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hi = mid<span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FindFirstGreatThanVal(nums,val,lo,hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>5.查找最后一个小于等于给定值的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分查找变体4：在一组有序数中,查找最后一个小于等于给定值的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindLastSmallThanVal</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> val,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo&gt;hi)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + ((hi-lo)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(val&lt;nums[mid])</span><br><span class="line">        hi = mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mid==hi||nums[mid+<span class="number">1</span>]&gt;val)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lo = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FindLastSmallThanVal(nums,val,lo,hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记-03排序</title>
    <url>/2019/11/16/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-03%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="总结表"><a href="#总结表" class="headerlink" title="总结表"></a>总结表</h3><table>
<thead>
<tr>
<th align="center">排序算法</th>
<th align="center">平均时间复杂度</th>
<th align="center">最好情况</th>
<th align="center">最坏情况</th>
<th align="center">空间复杂度</th>
<th align="center">稳定性</th>
<th align="center">排序方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">冒泡排序</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(n)</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(1)</td>
<td align="center">稳定</td>
<td align="center">in-place</td>
</tr>
<tr>
<td align="center">选择排序</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(1)</td>
<td align="center">不稳定</td>
<td align="center">in-place</td>
</tr>
<tr>
<td align="center">插入排序</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(n)</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(1)</td>
<td align="center">稳定</td>
<td align="center">in-place</td>
</tr>
<tr>
<td align="center">归并排序</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(n)</td>
<td align="center">稳定</td>
<td align="center">out-place</td>
</tr>
<tr>
<td align="center">快速排序</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(logn)</td>
<td align="center">不稳定</td>
<td align="center">in-place</td>
</tr>
<tr>
<td align="center">堆排序</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(nlogn)</td>
<td align="center">O(1)</td>
<td align="center">不稳定</td>
<td align="center">in-place</td>
</tr>
<tr>
<td align="center">桶排序</td>
<td align="center">O(n+k)</td>
<td align="center">O(n+k)</td>
<td align="center">O(n<sup>2</sup>)</td>
<td align="center">O(n+k)</td>
<td align="center">稳定</td>
<td align="center">out-place</td>
</tr>
<tr>
<td align="center">计数排序</td>
<td align="center">O(n+k)</td>
<td align="center">O(n+k)</td>
<td align="center">O(n+k)</td>
<td align="center">O(k)</td>
<td align="center">稳定</td>
<td align="center">out-place</td>
</tr>
<tr>
<td align="center">基数排序</td>
<td align="center">O(n*k)</td>
<td align="center">O(n*k)</td>
<td align="center">O(n*k)</td>
<td align="center">O(n+k)</td>
<td align="center">稳定</td>
<td align="center">out-place</td>
</tr>
</tbody></table>
<p>  注：排序方式in-place意思是原地排序，与内部排序和外部排序(数据存储在外部磁盘中，无法一次全部加载到内存中)的概念不同。</p>
<br>

<h3 id="各类排序算法实现"><a href="#各类排序算法实现" class="headerlink" title="各类排序算法实现"></a>各类排序算法实现</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h4><p><strong>基本思想</strong>：每一趟逐次比较相邻元素，总是把值大的元素(泡泡)往上冒，一趟可以放好一个元素的位置，执行n趟即可。加入一个flag标志(如果某一趟没有执行交换操作则说明已经有序，即可提前结束排序)可以优化最好情况的时间复杂度到O(n)。</p>
<p>C++实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.冒泡排序</span></span><br><span class="line"><span class="comment">// 时间复杂度:最好-O(n),最坏-O(n^2)，平均-O(n^2)  </span></span><br><span class="line"><span class="comment">// 空间复杂度:O(1)</span></span><br><span class="line"><span class="comment">// 稳定排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">                nums[j]=nums[j+<span class="number">1</span>];</span><br><span class="line">                nums[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BubbleSort</span><span class="params">(data)</span>:</span></span><br><span class="line">    length = len(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[j]&gt;data[j+<span class="number">1</span>]:</span><br><span class="line">                data[j+<span class="number">1</span>],data[j] = data[j],data[j+<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><strong>选择排序</strong></h4><p><strong>基本思想</strong>：每次从未排序区间选择一个最小的元素放到已排序区间</p>
<p> C++实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.选择排序</span></span><br><span class="line"><span class="comment">// 时间复杂度:最好-O(n^2),最坏-O(n^2)，平均-O(n^2)  </span></span><br><span class="line"><span class="comment">// 空间复杂度:O(1)</span></span><br><span class="line"><span class="comment">// 不稳定排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tempMin=nums[i],index=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;tempMin)</span><br><span class="line">            &#123;</span><br><span class="line">                tempMin=nums[j];</span><br><span class="line">                index=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[index]=nums[i];</span><br><span class="line">        nums[i]=tempMin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SelectSort</span><span class="params">(data)</span>:</span></span><br><span class="line">    length=len(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        tempMin,index=data[i],i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,length):</span><br><span class="line">            <span class="keyword">if</span> data[j]&lt;tempMin:</span><br><span class="line">                tempMin=data[j]</span><br><span class="line">                index=j</span><br><span class="line">        data[index]=data[i]</span><br><span class="line">        data[i]=tempMin</span><br></pre></td></tr></table></figure>

<br>

<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p><strong>基本思想</strong>：每次从未排序区间往已排序区间插入元素</p>
<p>C++实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.插入排序</span></span><br><span class="line"><span class="comment">// 时间复杂度:最好-O(n),最坏-O(n^2)，平均-O(n^2)  </span></span><br><span class="line"><span class="comment">// 空间复杂度:O(1)</span></span><br><span class="line"><span class="comment">// 稳定排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化：假定一个元素是已排序区间，之后的元素为未排序区间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i],j;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp&gt;=nums[j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums[j+<span class="number">1</span>]=nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j+<span class="number">1</span>]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSort</span><span class="params">(data)</span>:</span></span><br><span class="line">    length=len(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length):</span><br><span class="line">        temp=data[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> temp&gt;data[j]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data[j+<span class="number">1</span>]=data[j]</span><br><span class="line">        data[j+<span class="number">1</span>]=temp</span><br></pre></td></tr></table></figure>

<br>

<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p><strong>基本思想</strong>：利用分治的思想，自底向上，关键在于归并(Merge)操作。</p>
<p>C++实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.归并排序</span></span><br><span class="line"><span class="comment">// 时间复杂度：所有情况下都是O(nlogn)</span></span><br><span class="line"><span class="comment">// 空间复杂度：每次归并需要开辟一个临时数组然后释放，所以是O(n)</span></span><br><span class="line"><span class="comment">// 稳定性：稳定</span></span><br><span class="line"><span class="comment">// 递推式：sort(p,q) = merge(sort(p,r),sort(r+1,q))  边界条件:p&gt;=q</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortR</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&gt;=q)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> r = (p+q)/<span class="number">2</span>;</span><br><span class="line">    MergeSortR(nums,p,r);</span><br><span class="line">    MergeSortR(nums,r+<span class="number">1</span>,q);</span><br><span class="line">    Merge(nums,p,q,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把nums[p...r]和nums[r+1,q]合并到nums[p...q]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> p,<span class="keyword">int</span> q,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=q-p+<span class="number">1</span>,i=p,j=r+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *tmp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="comment">//二路归并</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=r&amp;&amp;j&lt;=q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;=nums[j])</span><br><span class="line">            tmp[k++]=nums[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tmp[k++]=nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把其中一个剩余的数组中的数搬到临时数组中</span></span><br><span class="line">    <span class="keyword">int</span> start=i,end=r;</span><br><span class="line">    <span class="keyword">if</span>(j&lt;=q)</span><br><span class="line">    &#123;</span><br><span class="line">       start=j;</span><br><span class="line">       end=q;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (start&lt;=end)</span><br><span class="line">        tmp[k++]=nums[start++];</span><br><span class="line">    <span class="comment">//将tmp临时数组拷贝回nums数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;=q-p;t++)</span><br><span class="line">        nums[p+t]=tmp[t];</span><br><span class="line">    <span class="keyword">delete</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MergeSortR(nums,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><strong>基本思想</strong>：也利用了分治思想，自顶向下，关键在于分区(Partition)操作。</p>
<p>补充：为了避免快排退化到O(n<sup>2</sup>)，选择分区元素可以采取不同的策略：1.三点取中法 2.随机选择法</p>
<p>C++实现:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.快速排序</span></span><br><span class="line"><span class="comment">// 时间复杂度：最坏(数组逆序):O(n^2),平均(大多数情况):O(nlogn)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment">// 稳定性：不稳定</span></span><br><span class="line"><span class="comment">// 递推式：sort(A[p..q]) = sort(A[p..r-1])+sort(A[r+1..q]) 终止条件:p&gt;=q</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSortR</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&gt;=q)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> r=Partition(nums,p,q);</span><br><span class="line">    QuickSortR(nums,p,r<span class="number">-1</span>);</span><br><span class="line">    QuickSortR(nums,r+<span class="number">1</span>,q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val=nums[q],i=p,j=p;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;=val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[j];</span><br><span class="line">            nums[j]=temp;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nums[q]=nums[j];</span><br><span class="line">    nums[j]=val;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QuickSortR(nums,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><p><strong>基本思想</strong>：将n个数据根据数据范围逐一放入m个桶中(桶之间是有序的)，再对桶内进行排序(如使用快排)，最后遍历桶逐一输出即可。</p>
<p><strong>时间复杂度分析</strong>：每个桶里有k=n/m个元素。每个桶内部使用快速排序，时间复杂度为O(k*logk)，m个桶的时间复杂度就是O(m*k*logk)，又因为k=n/m，替换掉k得到O(n*log(n/m))，当m接近n时，log(n/m)是一个很小的常量可以忽略。所以桶排序的时间复杂度接近O(n)。极端情况下，如果数据都被划到一个桶里，就退化为O(nlogn)的算法了。</p>
<p>应用场景：桶排序比较适合应用在外部排序中。比如数据量太大无法一次全部加载到内存中，那么可以根据数据范围创建一定数量的桶。扫描文件将数据放到相应的桶中，然后将每个桶放到内存中进行快速排序。最后再按照桶的顺序依次将数据写入一个文件就可以了。</p>
<br>

<h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p>基本思想：计数排序实际上是桶排序的一种特殊情况，每个桶里的数据都是相同的，省掉了桶内排序的时间。计数排序的一般步骤为：1.确定数组中数据的范围(最大值)&nbsp;2.遍历数据计算每个元素的个数并存放到计数数组中&nbsp;3.对计数数组依次累加，此时存放的是小于等于某值的元素个数。&nbsp;4.根据计数数组将原数据放到合适的位置</p>
<p>应用场景：考生成绩排序</p>
<br>

<h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><p>基本思想：从低位到高位根据每一位来排序(用桶排序或计数排序)。对数据要求比较高：可以独立分割出位来进行比较，而且位之间有递进关系，每一位的数据范围也不能太大，要用稳定的线性排序算法来排序。所以如果有k位的话，时间复杂度就是O(k*n);</p>
<p>应用场景：电话号码排序，英文单词排序</p>
]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记-02递归的理解</title>
    <url>/2019/11/01/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-02%E9%80%92%E5%BD%92%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1-关于递归的感受"><a href="#1-关于递归的感受" class="headerlink" title="1. 关于递归的感受"></a>1. 关于递归的感受</h2><h4 id="1-1-什么是递归"><a href="#1-1-什么是递归" class="headerlink" title="1.1 什么是递归"></a>1.1 什么是递归</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我学习数据结构和算法的时候，<strong>递归</strong>和<strong>动态规划</strong>是我觉得最难啃的两块硬骨头，在此我想记录下我对递归的一些理解和想法。首先，什么是递归？递归是一个函数自己调用自己的过程，调用的过程可称之为<strong>递</strong>，结果返回的时候可称之为<strong>归</strong>。</p>
<p>   &nbsp;&nbsp; 递归是一种十分优雅的编程技巧，十分适合计算机来干，但却有点不适合人脑的思维方式。我们通常喜欢从简单问题出发，发现事物的规律，从而推导出一般性的结论（类似<em>数学归纳法</em>的过程）。而递归则是从最后要解决的问题着眼，将问题分解为一个或若干个子问题，从而继续解决子问题直到遇到边界条件。<br></p>
<p>​    例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经典的爬楼梯问题:一步可以上一阶或两阶台阶，问n阶台阶有多少种走法？</span></span><br><span class="line"><span class="comment">// 递推公式:f(n)=f(n-1)+f(n-2)   边界条件:f(1)=1,f(2)=2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> f(n<span class="number">-1</span>)+f(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h4 id="1-2-思维误区"><a href="#1-2-思维误区" class="headerlink" title="1.2 思维误区"></a>1.2 思维误区</h4><p>  &nbsp;&nbsp;  我们往往陷入了一个<strong>思维误区：遇到递归问题时，总是下意识的尝试用人脑去模拟递归调用的过程，觉得不模拟出这个过程就认为自己没有理解递归，甚至打击到自己的自信心。其实这是不对的！！！很多大牛都无法人脑模拟稍微复杂点的递归问题，我们完全不用想一层层的调用关系。</strong>  </p>
<p>​     </p>
<h4 id="1-3-如何思考递归问题"><a href="#1-3-如何思考递归问题" class="headerlink" title="1.3 如何思考递归问题"></a>1.3 如何思考递归问题</h4><p>​    &nbsp;&nbsp;那么怎样去思考递归问题呢？举个例子，我们将待分析的问题A分解成若干个子问题B、C、D，然后去思考A与子问题B、C、D之间的关系，再摸索出边界条件就可以了<strong>。简而言之，就是寻找原问题和子问题之间的关系，找到递推公式，再找到边界条件。这样，递归的代码也自然好实现了。</strong>  </p>
<p>​     </p>
<h4 id="1-4-什么情况下可以用递归来解决问题"><a href="#1-4-什么情况下可以用递归来解决问题" class="headerlink" title="1.4 什么情况下可以用递归来解决问题"></a>1.4 什么情况下可以用递归来解决问题</h4><ol>
<li>原问题可以分解为一个或多个子问题</li>
<li>子问题除了问题规模比原问题小外，求解思路完全相同</li>
<li>存在边界条件（递归终止条件）      </li>
</ol>
<p>​    </p>
<h4 id="1-5-递归的利与弊"><a href="#1-5-递归的利与弊" class="headerlink" title="1.5 递归的利与弊"></a>1.5 递归的利与弊</h4><ul>
<li><p>递归代码的表达力很强，十分简洁优雅。</p>
</li>
<li><p>空间复杂度高，有堆栈溢出风险，过多的函数调用会耗时</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>算法笔记-01复杂度分析</title>
    <url>/2019/10/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-01%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-为什么要做这个笔记"><a href="#1-为什么要做这个笔记" class="headerlink" title="1. 为什么要做这个笔记"></a>1. 为什么要做这个笔记</h2><p>​    最近开始重新学习数据结构与算法知识，俗话说：读书白遍，其义自见，要想真正学好数据结构与算法，必须要经过不断地反复锤炼才行，做笔记是一个消化知识的过程，在脑海中将学到的知识重演一遍并以自己的话总结出来，这样自身的内功才能得以提升。</p>
<h2 id="2、时间复杂度"><a href="#2、时间复杂度" class="headerlink" title="2、时间复杂度"></a>2、时间复杂度</h2><h4 id="2-1-什么是时间复杂度"><a href="#2-1-什么是时间复杂度" class="headerlink" title="2.1 什么是时间复杂度"></a>2.1 什么是时间复杂度</h4><ul>
<li><p>时间复杂度描述的是算法的<strong>执行时间随问题规模增长变化的趋势</strong></p>
<p>​      </p>
</li>
</ul>
<h4 id="2-2-为什么要引入时间复杂度"><a href="#2-2-为什么要引入时间复杂度" class="headerlink" title="2.2 为什么要引入时间复杂度"></a>2.2 为什么要引入时间复杂度</h4><ul>
<li><p>事前对算法进行分析，指导我们写出高效的程序</p>
</li>
<li><p>提高我们的逻辑思维能力和分析问题的能力</p>
</li>
<li><p>与性能测试并不冲突，性能测试更为具体，而时间复杂度分析的是随问题规模增长下程序运行时间的变化趋势</p>
</li>
</ul>
<h4 id="2-3-怎样判断一个程序的时间复杂度（重点）"><a href="#2-3-怎样判断一个程序的时间复杂度（重点）" class="headerlink" title="2.3 怎样判断一个程序的时间复杂度（重点）"></a>2.3 怎样判断一个程序的时间复杂度（重点）</h4><ol>
<li><strong>单段代码看高频</strong>：看最内层代码的执行次数（如：循环）</li>
<li><strong>多段代码取最大</strong>：只考虑最高阶的项，低阶项、系数、常数都可以忽略（加法法则）</li>
<li><strong>嵌套代码求乘积</strong>：时间复杂度为内层和外层的乘积（乘法法则）</li>
<li><strong>多个规模求加法</strong>：时间复杂度为其求和的结果（如：O(n+m)）</li>
</ol>
<a id="more"></a>





<h4 id="2-4-常见的时间复杂度"><a href="#2-4-常见的时间复杂度" class="headerlink" title="2.4 常见的时间复杂度"></a>2.4 常见的时间复杂度</h4><h5 id="O-1-lt-O-logn-lt-O-n-lt-O-nlogn-lt-O-n2-lt-O-n3-lt-O-2n-lt-O-n"><a href="#O-1-lt-O-logn-lt-O-n-lt-O-nlogn-lt-O-n2-lt-O-n3-lt-O-2n-lt-O-n" class="headerlink" title="O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2n)&lt;O(n!)"></a>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)</h5><p><img src="https://i.loli.net/2019/10/24/hWDm6Ylsf3bMu7j.jpg" alt="2.jpg"></p>
<p>注意：对于对数阶，由于换底公式和可以省略系数，所以不管以2为底还是以3为底，我们都记作O(logn)</p>
<h4 id="2-5-最好时间复杂度、最坏时间复杂度、平均时间复杂度、均摊时间复杂度"><a href="#2-5-最好时间复杂度、最坏时间复杂度、平均时间复杂度、均摊时间复杂度" class="headerlink" title="2.5 最好时间复杂度、最坏时间复杂度、平均时间复杂度、均摊时间复杂度"></a>2.5 最好时间复杂度、最坏时间复杂度、平均时间复杂度、均摊时间复杂度</h4><p>​    为了<strong>更准确的描述</strong>算法的复杂度，引入以上四个概念。比如下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (count == array.length) &#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">         sum = sum + array[i];</span><br><span class="line">      &#125;</span><br><span class="line">      array[<span class="number">0</span>] = sum;</span><br><span class="line">      count = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   array[count] = val;</span><br><span class="line">   ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最好时间复杂度：O(1)，最坏时间复杂度：O(n)，平均时间复杂度：O(1)，均摊时间复杂度：O(1)</p>
<ul>
<li><h5 id="如何比较平均时间复杂度和均摊时间复杂度？"><a href="#如何比较平均时间复杂度和均摊时间复杂度？" class="headerlink" title="如何比较平均时间复杂度和均摊时间复杂度？"></a>如何比较平均时间复杂度和均摊时间复杂度？</h5><ol>
<li>平均时间复杂度：代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。</li>
<li>均摊时间复杂度：两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。</li>
</ol>
<p><strong>总结：平均和均摊基本是一个概念，均摊是平均的一种特殊情况，可以凭感觉分析是O(1)还是O(n)，如果出现O(1)的次数远大于出现O(n)的次数，那么平均和均摊复杂度就是O(1)</strong>  </p>
</li>
</ul>
<h2 id="2、空间复杂度"><a href="#2、空间复杂度" class="headerlink" title="2、空间复杂度"></a>2、空间复杂度</h2><ul>
<li>空间复杂度较为简单。与时间复杂度类似，空间复杂度全称是渐进空间复杂度，描述的是算法的<strong>存储空间随问题规模增长的变化趋势</strong>。常见的空间复杂度就是 O(1)、O(n)、O(n<sup>2</sup>)。</li>
<li><strong>注意：</strong>算法的空间复杂度考虑的是算法在<strong>运行过程中临时占用的存储空间</strong>。而不考虑输入输出数据所占用的存储空间（因为它是由问题本身决定的，不随算法的不同而改变）。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法学习笔记</category>
      </categories>
      <tags>
        <tag>复杂度分析</tag>
      </tags>
  </entry>
  <entry>
    <title>自我提升-表达技巧</title>
    <url>/2019/10/04/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87-%E8%A1%A8%E8%BE%BE%E6%B2%9F%E9%80%9A/</url>
    <content><![CDATA[<h2 id="如何逻辑清晰地向别人表达自己的观点？"><a href="#如何逻辑清晰地向别人表达自己的观点？" class="headerlink" title="如何逻辑清晰地向别人表达自己的观点？"></a>如何逻辑清晰地向别人表达自己的观点？</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a><em>基本</em></h3><ul>
<li>好的表达包含<strong>“观点”</strong>+<strong>”客观事实“</strong></li>
<li>好的表达要有结构，可以使用<strong>“讲三点”</strong>方法（重要的事情讲三点）</li>
<li>好的表达应富有<strong>逻辑</strong>，经得起<strong>推敲</strong></li>
</ul>
<p><img src="https://i.loli.net/2019/10/04/95eHDRgNlKtdkIm.jpg" alt="1.jpg"></p>
<h3 id="训练方法"><a href="#训练方法" class="headerlink" title="训练方法"></a><em>训练方法</em></h3><h4 id="1-复盘练习法"><a href="#1-复盘练习法" class="headerlink" title="1.复盘练习法"></a>1.复盘练习法</h4><p>​    回顾当时沟通的目的，<strong>重演过程</strong>并分析原因，探寻对话规律</p>
<h4 id="2-复述练习法"><a href="#2-复述练习法" class="headerlink" title="2.复述练习法"></a>2.复述练习法</h4><p>​    想提高沟通表达能力，最简单有效的方法就是<strong>复述一个故事</strong>，可以用手机录音</p>
<h4 id="3-电梯法则练习法"><a href="#3-电梯法则练习法" class="headerlink" title="3.电梯法则练习法"></a>3.电梯法则练习法</h4><p>​     要在最短的时间内，把事情表达清楚，凡事直奔主题、结果，将表达内容<strong>归纳</strong>在3个要点以内，30s之内完成。</p>
]]></content>
      <categories>
        <category>自我提升</category>
      </categories>
      <tags>
        <tag>自我提升</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT算法知识点回顾</title>
    <url>/2019/09/22/PAT%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<h1 id="数据结构与算法知识点总结："><a href="#数据结构与算法知识点总结：" class="headerlink" title="数据结构与算法知识点总结："></a>数据结构与算法知识点总结：</h1><h4 id="实用技巧："><a href="#实用技巧：" class="headerlink" title="实用技巧："></a>实用技巧：</h4><h5 id="1-fill-函数的使用"><a href="#1-fill-函数的使用" class="headerlink" title="1.  fill()函数的使用"></a>1.  fill()函数的使用</h5><p>​    填充一维数组：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line">  fill(arr, arr + <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">  fill(v.begin(), v.end(), <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>​    填充二维数组：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">fill(dis[<span class="number">0</span>], dis[<span class="number">0</span>]+maxn*maxn, INF);</span><br><span class="line"><span class="comment">// 因为dis[0]才是dis的首元素dis[0][0]的地址fill()函数的使用</span></span><br></pre></td></tr></table></figure>

<h5 id="2-memset-函数的使用"><a href="#2-memset-函数的使用" class="headerlink" title="2. memset()函数的使用"></a>2. memset()函数的使用</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a); </span><br><span class="line">    <span class="comment">//注意：memset为字节填充，如果填充整形数组只能填充0和-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-count用于统计数组或向量中某个值出现的次数"><a href="#3-count用于统计数组或向量中某个值出现的次数" class="headerlink" title="3. count用于统计数组或向量中某个值出现的次数"></a>3. count用于统计数组或向量中某个值出现的次数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向量计数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(v.begin(), v.end(), <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(v.begin(), v.end(), <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(v.begin(), v.end(), <span class="number">6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//数组计数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(a, a + <span class="number">10</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(a, a + <span class="number">10</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(a, a + <span class="number">10</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>

<h5 id="4-erase-和remove-结合起来删除容器中的指定元素"><a href="#4-erase-和remove-结合起来删除容器中的指定元素" class="headerlink" title="4.erase()和remove()结合起来删除容器中的指定元素"></a>4.erase()和remove()结合起来删除容器中的指定元素</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec.erase( remove(vec.begin(), vec.end(), <span class="string">'A'</span>), vec.end() );</span><br></pre></td></tr></table></figure>

<h5 id="5-利用find-查找所有子串或字符在原字符串中的位置"><a href="#5-利用find-查找所有子串或字符在原字符串中的位置" class="headerlink" title="5.利用find()查找所有子串或字符在原字符串中的位置"></a>5.利用find()查找所有子串或字符在原字符串中的位置</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((pos=str.find(c,pos))!=<span class="built_in">string</span>::npos)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 其它代码</span></span><br><span class="line">	pos++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-C语言读入一行带空格的字符串-读到的回车符丢掉"><a href="#5-C语言读入一行带空格的字符串-读到的回车符丢掉" class="headerlink" title="5.C语言读入一行带空格的字符串(读到的回车符丢掉)"></a>5.C语言读入一行带空格的字符串(读到的回车符丢掉)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);    <span class="comment">//^表示非，意思只要没有遇到回车符\n，都读进来</span></span><br></pre></td></tr></table></figure>

<h5 id="7-大整数乘法核心代码"><a href="#7-大整数乘法核心代码" class="headerlink" title="7.大整数乘法核心代码"></a>7.大整数乘法核心代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num2.size();j++)</span><br><span class="line">    &#123;</span><br><span class="line">        result[i+j]+=num1[i]*num2[j];       <span class="comment">//核心</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;result.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(result[i]&gt;=<span class="number">10</span>)                       <span class="comment">//统一处理进位</span></span><br><span class="line">    &#123;</span><br><span class="line">        result[i+<span class="number">1</span>]+=result[i]/<span class="number">10</span>;       </span><br><span class="line">        result[i]=result[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<h4 id="数据结构与算法（补充部分，以防万一-）"><a href="#数据结构与算法（补充部分，以防万一-）" class="headerlink" title="数据结构与算法（补充部分，以防万一~）"></a>数据结构与算法（补充部分，以防万一~）</h4><h4 id="算法部分："><a href="#算法部分：" class="headerlink" title="算法部分："></a>算法部分：</h4><h4 id="1、动态规划（DP）"><a href="#1、动态规划（DP）" class="headerlink" title="1、动态规划（DP）"></a>1、动态规划（DP）</h4><h5 id="N阶楼梯上楼问题："><a href="#N阶楼梯上楼问题：" class="headerlink" title="N阶楼梯上楼问题："></a>N阶楼梯上楼问题：</h5><p>​    一次可以走两阶或一阶，问有多少种上楼方式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> f[<span class="number">100</span>];</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f[n]&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>

<h4 id="数据结构部分："><a href="#数据结构部分：" class="headerlink" title="数据结构部分："></a>数据结构部分：</h4><h4 id="1、树："><a href="#1、树：" class="headerlink" title="1、树："></a>1、树：</h4><h5 id="后序和中序构造二叉树："><a href="#后序和中序构造二叉树：" class="headerlink" title="后序和中序构造二叉树："></a>后序和中序构造二叉树：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> leftChild[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> rightChild[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> post[],<span class="keyword">int</span> in[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> root = post[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(in[i]!=root&amp;&amp;i&lt;n)</span><br><span class="line">        i++;</span><br><span class="line">    leftChild[root]=buildTree(post,in,i);</span><br><span class="line">    rightChild[root]=buildTree(post+i,in+i+<span class="number">1</span>,n-i<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历:"></a>层序遍历:</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;q.front();</span><br><span class="line">          flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;q.front();</span><br><span class="line">        <span class="keyword">if</span>(leftChild[q.front()]!=<span class="number">0</span>)</span><br><span class="line">            q.push(leftChild[q.front()]);</span><br><span class="line">        <span class="keyword">if</span>(rightChild[q.front()]!=<span class="number">0</span>)</span><br><span class="line">            q.push(rightChild[q.front()]);</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、图："><a href="#2、图：" class="headerlink" title="2、图："></a>2、图：</h4><h5 id="djikstra-dfs求最短路径："><a href="#djikstra-dfs求最短路径：" class="headerlink" title="djikstra+dfs求最短路径："></a>djikstra+dfs求最短路径：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">djikstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">-1</span>,temp_min=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[j]&lt;temp_min&amp;&amp;!visited[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp_min=dis[j];</span><br><span class="line">                k=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        visited[k]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[k]+edge[k][j]&lt;dis[j]&amp;&amp;edge[k][j]!=INF)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[j]=dis[k]+edge[k][j];</span><br><span class="line">                    pre[j].clear();</span><br><span class="line">                    pre[j].push_back(k);            <span class="comment">//pre[]用于后面用dfs求出最短路径上的点</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dis[k]+edge[k][j]==dis[j]&amp;&amp;edge[k][j]!=INF)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre[j].push_back(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印出多条最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span>                       </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    temppath.push_back(v);</span><br><span class="line">    <span class="keyword">if</span>(v==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> need=<span class="number">0</span>,back=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=temppath.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id=temppath[i];</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;id&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        temppath.pop_back();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[v].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dfs(pre[v][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    temppath.pop_back();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、并查集："><a href="#3、并查集：" class="headerlink" title="3、并查集："></a>3、并查集：</h4><p>联想江湖掌门帮派的例子~</p>
<p><strong>find（查）函数：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> son,tmp;</span><br><span class="line">    son = root;</span><br><span class="line">    <span class="keyword">while</span>(root!=pre[root])</span><br><span class="line">        root=pre[root];</span><br><span class="line">    <span class="keyword">while</span>(son!=root)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=pre[son];</span><br><span class="line">        pre[son]=root;</span><br><span class="line">        son=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>union（并）函数：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    x=find(r1);</span><br><span class="line">    y=find(r2);</span><br><span class="line">    <span class="keyword">if</span>(x!=y)</span><br><span class="line">        pre[x]=y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、动态规划（01背包问题）："><a href="#3、动态规划（01背包问题）：" class="headerlink" title="3、动态规划（01背包问题）："></a>3、动态规划（01背包问题）：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1005</span>],w[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=v[i])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]=max(dp[i<span class="number">-1</span>][j-v[i]]+w[i],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n][m];</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2019/08/26/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="从github远程克隆项目修改后再推送："><a href="#从github远程克隆项目修改后再推送：" class="headerlink" title="从github远程克隆项目修改后再推送："></a>从github远程克隆项目修改后再推送：</h4><ol>
<li><p><code>git clone &lt;url&gt;</code>&emsp;将项目克隆到本地</p>
</li>
<li><p><code>git clone -b &quot;branchname&quot; &lt;url&gt;</code> 克隆远程项目分支到本地</p>
</li>
<li><p><code>git add .</code> &emsp;跟踪所有的文件</p>
</li>
<li><p><code>git commit -m &quot;commit message&quot;</code>  &emsp;提交文件到本地版本库</p>
</li>
<li><p><code>git push orgin &quot;branchname&quot;</code>  &emsp; 推送到远程仓库分支 </p>
</li>
<li><p><code>git pull</code>  拉取远程分支并合并</p>
</li>
<li><p><code>git status</code>  &emsp;随时查看状态信息</p>
</li>
<li><p><code>git branch &quot;branchname&quot;</code>  创建分支</p>
</li>
<li><p><code>git checkout -b 分支名</code>  创建一个新分支并切换到该分支</p>
</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo食用指南</title>
    <url>/2019/08/26/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h2><ol>
<li><code>hexo new &quot;新文章标题&quot;</code>  &emsp;新建文章   </li>
<li><code>hexo new page &quot;页面名称&quot;</code>&emsp;新建页面</li>
<li><code>hexo clean</code> &emsp;清除缓存</li>
<li><code>hexo g</code>&emsp;生成静态网页</li>
<li><code>hexo s</code>&emsp;启动本地服务器并监听变化自动更新显示</li>
<li><code>hexo d</code> &emsp;部署</li>
</ol>
<h2 id="2-发布博客"><a href="#2-发布博客" class="headerlink" title="2.发布博客"></a>2.发布博客</h2><p>执行<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>来发布博客</p>
<p>我将这三个命令写到了deploy.sh这个脚本文件中，以后部署只用执行脚本<code>sh deploy.sh</code>就可以啦~</p>
<h2 id="3-日常备份"><a href="#3-日常备份" class="headerlink" title="3.日常备份"></a>3.日常备份</h2><p>执行<code>git add .</code>、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来备份</p>
<p>（注：我的是master分支用来放public里的页面文件用于展示，hexo分支用来备份源文件）</p>
<p>​    </p>
<a id="more"></a>

<h2 id="4-恢复"><a href="#4-恢复" class="headerlink" title="4.恢复"></a>4.恢复</h2><p>电脑重装后或想在其他电脑上修改博客步骤：</p>
<ol>
<li>安装git</li>
<li>安装Node.js</li>
<li>执行<code>git clone -b hexo git@github.com:cszcsz/cszcsz.github.io.git</code>  (注：这里只克隆hexo分支)</li>
<li>在项目文件夹内执行如下命令：<code>npm install hexo-cli -g</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code></li>
<li>记住：hexo分支用于备份源文件，master分支用于存放public文件夹里的内容。linux下需要再命令前面加上sudo改变权限</li>
</ol>
<p>补充操作：</p>
<p>添加ssh-keys</p>
<ol>
<li>执行<code>ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</code></li>
<li>用户文件夹下的.ssh目录会生成id_rsa和id_rsa.pub两个文件，其中id_rsa是私钥，id_rsa.pub是公钥</li>
<li>登录github，在设置里面new SSH key，在key文本框里粘贴公钥id_rsa.pub文件的内容</li>
<li>可以用<code>ssh git@github.com</code>来验证连接</li>
</ol>
<p>git设置全局用户名和邮箱</p>
<pre><code>1. `git config --global user.name &quot;xxx&quot;`
2. `git config -- global user.email &quot;xxx@qq.com&quot;`</code></pre><p><strong>配置过程中可能遇到的问题：</strong></p>
<p><strong>问题1：</strong></p>
<p>​    提示<code>TypeError: can&#39;t read property count of undefined</code>且错误是在<code>hexo-baidu-url-submit</code>包中</p>
<p>解决方法：删除该包即可<code>npm uninstall hexo-baidu-url-submit</code></p>
<h2 id="5-附hexo项目文件说明"><a href="#5-附hexo项目文件说明" class="headerlink" title="5.附hexo项目文件说明"></a>5.附hexo项目文件说明</h2><ol>
<li><p><code>_config.yml</code>站点的配置文件，需要拷贝；</p>
</li>
<li><p><code>themes/</code>主题文件夹，需要拷贝；</p>
</li>
<li><p><code>source</code>博客文章的.md文件，需要拷贝；</p>
</li>
<li><p><code>scaffolds/</code>文章的模板，需要拷贝；</p>
</li>
<li><p><code>package.json</code>安装包的名称，需要拷贝（如果有<code>package-lock.json</code>文件也一并上传，作用是控制依赖包版本号）；</p>
</li>
<li><p><code>.gitignore</code>限定在push时哪些文件可以忽略，需要拷贝</p>
</li>
<li><p><code>.git/</code>主题和站点都有，标志这是一个git项目，不需要拷贝；</p>
</li>
<li><p><code>node_modules/</code>是安装包的目录，在执行<code>npm install</code>的时候会重新生成，不需要拷贝；</p>
</li>
<li><p><code>public</code>是<code>hexo g</code>生成的静态网页，不需要拷贝；</p>
</li>
<li><p><code>.deploy_git</code>同上，<code>hexo g</code>也会生成，不需要拷贝；</p>
</li>
<li><p><code>db.json</code>文件，不需要拷贝。</p>
<p>注：不需要拷贝的正是<code>.gitignore</code>里忽略的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建问题</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
